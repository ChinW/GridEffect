var canvas
	, ctx
	, center
	, width = 50
	, height = 50
	, interval = 10
	, influence = 40
	, waves
	, startX 
	, startY
	, delay = 0
	, mouse = {
		x:0,
		y:0
	}
	, once = 3;

window.requestAnimFrame = 
	window.requestAnimationFrame ||
	window.webkitRequestAnimationFrame ||
	window.mozRequestAnimationFrame ||
	window.oRequestAniamtionFrame ||
	window.msRequestAnimationFrame ||
	function (callback) {
		window.setTimeout(callback, 1000/60);
};

function getRandomInt(min, max){
	return Math.floor(Math.random() * (max - min))+min
}

/**
 * Point
 */

var Point = function(x, y){
	this.x = x
	this.y = y

	this.px = x // previous x
	this.py = y // previous y

	this.constraints = []
}

Point.prototype.draw = function(){
	var i = this.constraints.length

	while(i--)
		this.constraints[i].update()

	i = this.constraints.length
	while(i--){
		this.constraints[i].draw()
	}
}

/**
 * Constraint
 */

var Constraint = function (p1, p2){
	this.p1 = p1
	this.p2 = p2

	this.length = interval

}

Constraint.prototype.update = function(){	
	if(mouse.x != 0){
		var diff_x = this.p1.x - mouse.x
			, diff_y = this.p1.y - mouse.y
			, dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y)
			, diff = (this.length - dist) /dist
		if(dist < influence ){
			this.p1.px = this.p1.x
			this.p1.py = this.p1.y

			this.p1.x = this.p1.x - diff_x *diff *0.1
			this.p1.y =  this.p1.y - diff_y *diff *0.1
		}
	}
  var diff_x  = this.p1.x - this.p2.x,
    diff_y  = this.p1.y - this.p2.y,
    dist    = Math.sqrt(diff_x * diff_x + diff_y * diff_y),
    diff    = (this.length - dist) / dist;


    var px = diff_x * diff *1.03;
    var py = diff_y * diff *1.03;

    this.p1.x += px;
    this.p1.y += py;
    this.p2.x -= px;
    this.p2.y -= py;
}

Constraint.prototype.draw = function(){
	ctx.moveTo(this.p1.x, this.p1.y)
	ctx.lineTo(this.p2.x, this.p2.y)
}

/**
 * Wave
 */

var Wave = function(){
	this.points = []

	this.drops = []
}

Wave.prototype.removePoints = function(points){
	console.log("Remove Points Index:",this.points.indexOf(points))
	this.points.splice(this.points.indexOf(points), 1)
}

Wave.prototype.draw = function(){
	ctx.beginPath()
	var i = this.points.length
	while(i--)
		this.points[i].draw()
	ctx.stroke()
	ctx.beginPath()
	i = this.drops.length
	while(i--){
		ctx.arc(this.drops[i].x, this.drops[i].y,3,0, Math.PI*2,true)
	}
	ctx.fillStyle = "red"
	ctx.fill()
}

Wave.prototype.drop = function(x, y){

}

function update(){
	ctx.clearRect(0,0, canvas.width, canvas.height)

	if(Math.random() > 0.98 && mouse.x == 0){
		mouse.x = getRandomInt(startX, startX+width*interval)
		mouse.y = getRandomInt(startY, startY+height*interval)

		waves.drops.push(new Point(mouse.x, mouse.y))
		// console.log("Droped",mouse.x, mouse.y)
	}

	waves.draw()


	requestAnimFrame(update)
}

function start(){
	startX = window.innerWidth/2 - (width*interval)/2 
	startY = 20

	waves = new Wave()
	for(var y = 0; y <= height; y++){
		for(var x = 0; x<= width; x++){
			var p = new Point(startX+ x*interval, startY+y*interval)

			x > 0 && p.constraints.push(new Constraint(p, waves.points[waves.points.length -1 ]))
			y > 0 && p.constraints.push(new Constraint(p, waves.points[x + (width+1)*(y-1)])) 

			waves.points.push(p)
		}
	}

	update()

}

window.onload = function(){
	canvas = document.getElementById("c");

	canvas.width = window.innerWidth -40;
	canvas.height = window.innerHeight -40;

	ctx = canvas.getContext("2d");
	if(ctx == false){
		alert("cannot get canvas context");
	}
	start()
}